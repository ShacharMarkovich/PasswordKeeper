{"version":3,"sources":["pages/Home.js","pages/Records/ShowPassword.js","pages/Records/DeleteRecord.js","pages/Connect/LoginForm.js","pages/Connect/RegisterForm.js","pages/Records/AddRecord.js","App.js","serviceWorker.js"],"names":["Home","md5","require","popup_msg_style","position","top","left","transform","backgroundColor","padding","zIndex","border","React","memo","recordId","useForm","register","handleSubmit","errors","useState","enc_pass","setEnc_pass","isOpen","setIsOpen","trigger","class","alt","src","on","open","onOpen","style","onSubmit","e","preventDefault","color","type","placeholder","name","ref","required","password","message","value","onClick","data","record","document","getElementById","fetch","method","headers","body","JSON","stringify","hashed_pass","record_id","id","replace","then","res","json","bytes","CryptoJS","AES","decrypt","toString","enc","Utf8","alert","context","useContext","managerContext","data-toggle","data-target","tabindex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","recordID2del","setDb","getElementsByClassName","remove","AddRecord","createContext","Boolean","window","location","hostname","match"],"mappings":"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","file":"static/js/main.bbdf0cb3.chunk.js","sourcesContent":["import React from 'react'\r\nimport { managerContext } from '../App.js'\r\n\r\nfunction Home() {\r\n    const manager_context = React.useContext(managerContext)\r\n    return <h1 style={manager_context.alignCenterStyle}>This is the 'Home' page</h1>\r\n}\r\n\r\nexport default Home\r\n","import React, { useState } from 'react'\r\nimport CryptoJS from 'crypto-js'\r\nimport Popup from 'reactjs-popup'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nvar md5 = require('md5')\r\n\r\n// popup msg style:\r\nconst popup_msg_style = {\r\n    position: 'fixed',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    backgroundColor: '#5f788a',\r\n    padding: '50px',\r\n    zIndex: 1000,\r\n    border: \"1px solid gray\"\r\n}\r\n\r\nfunction ShowPassword({ recordId }) {\r\n    const { register, handleSubmit, errors } = useForm()\r\n\r\n    const [enc_pass, setEnc_pass] = useState(\"\")\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const showPasswordHandler = data => {\r\n        let record = document.getElementById(recordId)\r\n        if (record.type === \"text\") {\r\n            record.type = \"password\"\r\n            record.value = enc_pass\r\n        }\r\n        else {\r\n            const password = md5(data['password'])\r\n            // taggle showing password handler, get the redord id,\r\n            //hashed the password that the user entered,\r\n\r\n            // send a POST request to backend server,\r\n            // there, it check if the password is currect and if this user own this record\r\n            fetch('/show-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ hashed_pass: password, record_id: record.id.replace('pass', '') })\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data[\"status\"] === \"success\") {\r\n                        record.type = \"text\"\r\n                        setEnc_pass(record.value) // save the enc password\r\n                        // Decrypt\r\n                        var bytes = CryptoJS.AES.decrypt(record.value, data[\"description\"])\r\n                        record.value = bytes.toString(CryptoJS.enc.Utf8)\r\n                    }\r\n                    else alert(data[\"description\"])\r\n                })\r\n        }\r\n        setIsOpen(false)\r\n    }\r\n\r\n    return (\r\n        <td ><Popup trigger={<button class=\"btn btn-sm\"> <img alt=\"show password eye icon\" src=\"/API/passwordsKepper/static/show_password.png\" /></button>}\r\n            on='click' open={isOpen} onOpen={() => setIsOpen(true)}>\r\n            <form style={popup_msg_style} onSubmit={e => e.preventDefault()}>\r\n                <h3 style={{ color: \"white\" }} class=\"article-metadata\">Please enter your password:</h3>\r\n                <input type=\"password\" placeholder=\"password here\" name=\"password\" ref={register({\r\n                    required: \"You must specify a password\"\r\n                })} />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n                <input type=\"submit\" value=\"Submit\" onClick={handleSubmit(showPasswordHandler)} />\r\n            </form>\r\n        </Popup></td>\r\n    )\r\n}\r\n\r\nexport default React.memo(ShowPassword)\r\n\r\n","import React from 'react'\r\nimport { managerContext } from '../../App.js'\r\n\r\nfunction DeleteRecord({ recordId }) {\r\n    const context = React.useContext(managerContext)\r\n    const deleteRecordHandler = recordID2del => {\r\n        // delete record handler,\r\n        // send a POST request to backend server, ask to remove the record with the given ID,\r\n        // then update the table of this user\r\n\r\n        // make sure that the user waht to delete:\r\n        fetch('/remove-record', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(recordID2del)\r\n        }).then(res => res.json())\r\n            .then(data => context.setDb(data))\r\n\r\n        // remove black screen\r\n        document.getElementsByClassName(\"modal-backdrop fade show\")[0].remove()\r\n    }\r\n\r\n\r\n    return (<div>\r\n        <button type=\"button\" class=\"btn btn-danger btn-sm m-1\"\r\n            data-toggle=\"modal\" data-target=\"#deleteModal\">\r\n            <img alt=\"remove record icon\" src=\"/API/passwordsKepper/static/trash.png\" /></button>\r\n        <div class=\"modal fade\" id=\"deleteModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"deleteModalLabel\"\r\n            aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"deleteModalLabel\">Delete Post?</h5>\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        <form onSubmit={e => e.preventDefault()}>\r\n                            <input class=\"btn btn-danger\" type=\"submit\" onClick={() => deleteRecordHandler(recordId)} value=\"Delete\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div >)\r\n}\r\n\r\nexport default React.memo(DeleteRecord)\r\n","import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { managerContext } from '../../App.js'\r\nvar md5 = require('md5');\r\n\r\nfunction LoginForm() {\r\n    const history = useHistory()\r\n    const manager_context = React.useContext(managerContext)\r\n\r\n    const [loginMsg, setLoginMsg] = useState(\"\")\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({});\r\n    const password = useRef({});\r\n    password.current = watch(\"password\", \"\");\r\n\r\n    const onSubmit = data => {\r\n        data['password'] = md5(data['password'])\r\n        fetch('/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => res.json()).then(data => {\r\n            if (data[\"status\"] === \"success\") {\r\n                setLoginMsg(\"\")\r\n                manager_context.setIsLogin(true)\r\n                history.push(\"/records\")\r\n            }\r\n            else\r\n                setLoginMsg(data[\"description\"])\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div class=\"content-section\" >\r\n            <h3 class=\"article-metadata\"> Login</h3>\r\n            <form onSubmit={e => e.preventDefault()}><br></br>\r\n                <label>Email</label>\r\n                <input class=\"list-group-item\" type=\"email\" placeholder=\"email\" name=\"email\" ref={register({\r\n                    required: \"You must specify an Email\",\r\n                    maxLength: { value: 50, message: \"Email must have no morw then 50 characters\" },\r\n                    pattern: { value: /^\\S+@\\S+$/i, message: \"Email must contain '@'\" }\r\n                })} />\r\n                {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Password</label>\r\n                <input class=\"list-group-item\" type=\"password\" placeholder=\"password\" name=\"password\" ref={register({\r\n                    required: \"You must specify a password\",\r\n                    minLength: { value: 4, message: \"Password must have at least 4 characters\" },\r\n                    maxLength: { value: 20, message: \"Password must have no morw then 20 characters\" }\r\n                })} />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n                <input type=\"checkbox\" name=\"rememberMe\" ref={register} />\r\n                <label>Remember Me</label>\r\n                <br></br>\r\n\r\n                {loginMsg !== \"\" && <p style={{ color: 'red' }}>{loginMsg}</p>}\r\n                <input class=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)} value=\"Sign In\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm","import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { managerContext } from '../../App.js'\r\nimport { useHistory } from 'react-router-dom';\r\nvar md5 = require('md5');\r\n\r\nfunction RegisterForm() {\r\n    const history = useHistory()\r\n    const manager_context = React.useContext(managerContext)\r\n\r\n    const [registerMsg, setRegisterMsg] = useState(\"\")\r\n\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({})\r\n    const password = useRef({})\r\n    password.current = watch(\"password\", \"\")\r\n    const onSubmit = async data => {\r\n        delete data['Password_confirm']\r\n        data['password'] = md5(data['password'])\r\n        fetch('/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => res.json()).then(data => {\r\n            if (data[\"status\"] === \"success\") {\r\n                setRegisterMsg(\"\")\r\n                manager_context.setIsLogin(true)\r\n                history.push(\"/records\")\r\n            }\r\n            else\r\n                setRegisterMsg(data[\"description\"])\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div class=\"content-section\" >\r\n            <h3 class=\"article-metadata\"> Register</h3>\r\n            <br></br>\r\n            <form onSubmit={e => e.preventDefault()}>\r\n                <label>Email</label>\r\n                <input class=\"list-group-item\" type=\"email\" placeholder=\"example@email.com\" name=\"email\" ref={register({\r\n                    required: \"You must specify an Email\",\r\n                    maxLength: { value: 50, message: \"Email must have no morw then 50 characters\" },\r\n                    pattern: { value: /^\\S+@\\S+$/i, message: \"Email must contain '@'\" }\r\n                })} />\r\n                {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Password</label>\r\n                <input class=\"list-group-item\" name=\"password\" type=\"password\" placeholder=\"password\" ref={register({\r\n                    required: \"You must specify a password\",\r\n                    minLength: { value: 8, message: \"Password must have at least 8 characters\" },\r\n                    maxLength: { value: 50, message: \"Password must have no morw then 50 characters\" }\r\n                })}\r\n                />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n\r\n                <label>Repeat Password</label>\r\n                <input class=\"list-group-item\" name=\"Password_confirm\" type=\"password\" placeholder=\"repeat password\"\r\n                    ref={register({\r\n                        validate: value => value === password.current || \"The passwords do not match\",\r\n                        required: \"You must specify a Repeat password\",\r\n                        minLength: { value: 8, message: \"Password must have at least 8 characters\" },\r\n                        maxLength: { value: 50, message: \"Password must have no morw then 50 characters\" }\r\n                    })}\r\n                />\r\n                {errors.Password_confirm && <p style={{ color: 'red' }}>{errors.Password_confirm.message}</p>}\r\n                <br></br>\r\n                {registerMsg !== \"\" && <p style={{ color: 'red' }}>{registerMsg}</p>}\r\n                <input class=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)} value=\"Sign Up\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import React, { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { managerContext } from '../../App.js'\r\nimport CryptoJS from 'crypto-js'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction AddRecord() {\r\n    const manager_context = React.useContext(managerContext) // context that containe all the data that go thourgh the children comps\r\n    const history = useHistory()\r\n\r\n    const { register, handleSubmit, errors } = useForm();   // add Record's form\r\n\r\n    const [enc_key, set_enc_key] = useState(\"not working\") // encrypt key state\r\n\r\n    useEffect(() => {\r\n        // this useEffect send POST request to the backend server, \r\n        // and get the hashed password of the current login user.\r\n        fetch('/hash', {\r\n            method: 'POST', headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\"{}\")\r\n        }).then(res => res.json()).then(data => set_enc_key(data['hashed']))\r\n    }, [])\r\n\r\n\r\n    const onSubmit = data => {\r\n        // this function handle the submition of the new record:\r\n\r\n        // get the encrypt key and encrypt the record's password\r\n        data['password'] = CryptoJS.AES.encrypt(data['password'], enc_key).toString();\r\n\r\n        // send POST request with the new record,\r\n        // the backend server and it to the db and return the updated table, and render it.\r\n        fetch('/add-record', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => res.json()).then(data => {\r\n            manager_context.setDb(data)\r\n            history.push(\"/records\")\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={manager_context.alignCenterStyle} >\r\n            <h3 class=\"article-metadata\"> Add Record</h3>\r\n            <p >Please fill the data below:</p>\r\n            <form class=\"content-section\">\r\n                <label>URL</label>\r\n                <input class=\"list-group-item\" type=\"url\" placeholder=\"http://www.example.com\" name=\"url\"\r\n                    ref={register({\r\n                        required: \"You must specify an URL\",\r\n                        pattern: {\r\n                            value: /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w-]+)+[\\w\\-_~:/?#[\\]@!&',;=.]+$/,\r\n                            message: \"URL not in the right pattern\"\r\n                        }\r\n                    })} />\r\n                {errors.url && <p style={{ color: 'red' }}>{errors.url.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Email</label>\r\n                <input class=\"list-group-item\" type=\"email\" placeholder=\"example@email.com\" name=\"email\" ref={register({\r\n                    required: \"You must specify an Email\",\r\n                    maxLength: { value: 50, message: \"Email must have no morw then 50 characters\" },\r\n                    pattern: { value: /^\\S+@\\S+$/i, message: \"Email must contain '@'\" }\r\n                })} />\r\n                {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Username</label>\r\n                <input class=\"list-group-item\" type=\"text\" placeholder=\"username\" name=\"username\"\r\n                    ref={register({ maxLength: { value: 20, message: \"username must have no morw then 20 characters\" } })} />\r\n                {errors.username && <p style={{ color: 'red' }}>{errors.username.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Password</label>\r\n                <input class=\"list-group-item\" name=\"password\" type=\"password\" placeholder=\"password\" ref={register({\r\n                    required: \"You must specify a password\",\r\n                    minLength: { value: 8, message: \"Password must have at least 8 characters\" },\r\n                    maxLength: { value: 50, message: \"Password must have no morw then 50 characters\" }\r\n                })}\r\n                />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n                <input class=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)} value=\"Add Record\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddRecord","import React, { useEffect, useState } from 'react'\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport Home from './pages/Home.js';\nimport Records from './pages/Records/Records.js';\nimport Connect from './pages/Connect/Connect.js';\nimport AddRecord from './pages/Records/AddRecord';\n\nconst align_center_style = {\n  position: 'fixed',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  padding: '50px',\n  zIndex: 100,\n  border: \"15px solid light gray\"\n}\n// App.js is the provider of the context\nexport const managerContext = React.createContext()\n\nfunction App() {\n  const [db, setDb] = useState([])\n  const [isLogin, setIsLogin] = useState(false)\n\n  const LogoutHandler = () => {\n    setIsLogin(false)\n    fetch('/logout').then(res => res.json()).then(data => {\n      if (data['status'] === 'success')\n        setDb([])\n      else alert(\"something wrong happend! check the backend server!\")\n    })\n  }\n\n  useEffect(() => {\n    fetch('islogin').then(res => res.json()).then(data => {\n      console.log(data)\n      console.log(isLogin)\n      const api_isLogin = data['status'] === 'success'\n      if (api_isLogin && !isLogin)\n        setIsLogin(true)\n      else if (!api_isLogin && isLogin)\n        setIsLogin(false)\n    })\n  }, [])\n  return (\n    <Router>\n      <div class=\"site-header\">\n        <nav class=\"navbar navbar-expand-md navbar-dark bg-steel fixed-top\">\n          <div class=\"container\">\n            <Link class=\"navbar-brand mr-4\" to=\"/\">Password Keeper</Link>\n            <div class=\"collapse navbar-collapse\" id=\"navbarToggle\">\n              <div class=\"navbar-nav mr-auto\">\n                {isLogin &&\n                  <><Link class=\"nav-item nav-link\" to=\"/records\">My Records</Link>\n                    <Link class=\"nav-item nav-link\" to=\"/add-record\">Add Record</Link></>}\n              </div>\n              <div class=\"navbar-nav\">\n                {isLogin ?\n                  <Link class=\"nav-item nav-link\" onClick={LogoutHandler} to=\"/\">Logout</Link>\n                  :\n                  <Link class=\"nav-item nav-link\" to=\"/connect\">Login &ensp;| &ensp;Register</Link>\n                }\n              </div>\n            </div>\n          </div >\n        </nav >\n      </div >\n      <managerContext.Provider value={{ db: db, setDb: setDb, isLogin: isLogin, setIsLogin: setIsLogin, alignCenterStyle: align_center_style }}>\n        <Switch>\n          <Route path=\"/connect\">\n            {!isLogin ? <Connect /> :\n              <Redirect replace to=\"/records\" />\n            }\n          </Route>\n          <Route path=\"/records\">\n            {isLogin ? <Records /> :\n              <Redirect replace to=\"/connect\" />\n            }\n          </Route>\n          <Route path=\"/add-record\">\n            {isLogin ? <AddRecord />\n              : <Redirect replace to=\"/connect\" />\n            }\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </managerContext.Provider>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}